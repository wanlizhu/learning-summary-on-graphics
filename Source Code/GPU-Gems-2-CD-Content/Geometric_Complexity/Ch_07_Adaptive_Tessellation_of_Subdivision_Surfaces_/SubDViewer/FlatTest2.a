!!FP1.0
# cgc version 1.3.0001, build date Sep 28 2004 16:01:04
# command line args: -profile fp30 -DFLAT2=1 -DDMAP=0
# source file: c:\3d\SubDViewer\flatTest.cg
#vendor NVIDIA Corporation
#version 1.0.02
#profile fp30
#program main
#semantic main.srcTexMap : TEXUNIT0
#semantic main.epTexMap : TEXUNIT1
#semantic main.offsetTexMap : TEXUNIT2
#semantic flatScale : FLATSCALE
#semantic dmapScale : DMAPSCALE
#var float4 offsetCoord : $vin.TEX0 : TEX0 : 0 : 1
#var float4 dstCoord : $vin.WPOS : WPOS : 1 : 1
#var float4 epCoord : $vin.TEX1 : TEX1 : 2 : 1
#var samplerRECT srcTexMap : TEXUNIT0 : texunit 0 : 3 : 1
#var samplerRECT epTexMap : TEXUNIT1 : texunit 1 : 4 : 1
#var samplerRECT offsetTexMap : TEXUNIT2 : texunit 2 : 5 : 1
#var float4 flatScale : FLATSCALE :  : -1 : 1
#var float4 dmapScale : DMAPSCALE :  : -1 : 0
#var float4 main : $vout.COL : COL : -1 : 1
DECLARE flatScale;
TEX   R0.xy, f[TEX0], TEX2, RECT;
ADDR  R5.xy, f[WPOS], R0;
ADDR  R0.xy, R5, {0, -1, 0, 0};
TEX   R0, R0, TEX0, RECT;
MOVR  R2.xyz, R0;
FRCR  R0.x, R0.w;
MULR  R0.x, R0, {1024, 0, 0, 0};
MOVR  R0.y, R0.w;
ADDR  R0.xy, R0, f[TEX1];
SGTRC HC.x, R0.w, {1, 0, 0, 0};
TEX   R2.xyz(GT.x), R0, TEX1, RECT;
ADDR  R0.xy, R5, {0, 2, 0, 0};
TEX   R0, R0, TEX0, RECT;
MOVR  R3.xyz, R0;
FRCR  R0.x, R0.w;
MULR  R0.x, R0, {1024, 0, 0, 0};
MOVR  R0.y, R0.w;
ADDR  R0.xy, R0, f[TEX1];
SGTRC HC.x, R0.w, {1, 0, 0, 0};
TEX   R3.xyz(GT.x), R0, TEX1, RECT;
ADDR  R0.xy, R5, {-1, 0, 0, 0};
TEX   R0, R0, TEX0, RECT;
MOVR  R1.y, R0.w;
SGTRC HC.x, R0.w, {1, 0, 0, 0};
FRCR  R0.w, R0;
MULR  R1.x, R0.w, {1024, 0, 0, 0};
ADDR  R1.xy, R1, f[TEX1];
TEX   R0.xyz(GT.x), R1, TEX1, RECT;
ADDR  R1.xy, R5, {2, 0, 0, 0};
TEX   R1, R1, TEX0, RECT;
FRCR  R0.w, R1;
MOVR  R4.y, R1.w;
MULR  R4.x, R0.w, {1024, 0, 0, 0};
SGTRC HC.x, R1.w, {1, 0, 0, 0};
ADDR  R4.xy, R4, f[TEX1];
TEX   R1.xyz(GT.x), R4, TEX1, RECT;
ADDR  R4.xy, R5, {0, 1, 0, 0};
TEX   R6.xyz, R4, TEX0, RECT;
TEX   R4.xyz, R5, TEX0, RECT;
ADDR  R0.w, R4.z, R6.z;
MULR  R1.w, R0, flatScale.x;
MOVR  R0.w, R1;
SLTRC HC.x, R1.w, flatScale.y;
ADDR  R5.xy, R5, {1, 0, 0, 0};
TEX   R5.xyz, R5, TEX0, RECT;
ADDR  R0.w(GT.x), -R1, flatScale.z;
ADDR  R1.w, R4.z, R5.z;
MULR  R2.w, R1, flatScale.x;
MOVR  R1.w, R2;
SLTRC HC.x, R2.w, flatScale.y;
ADDR  R1.w(GT.x), -R2, flatScale.z;
ADDR  R1.xyz, R4, R1;
ADDR  R0.xyz, R0, R5;
MADR  R0.xyz, -R4, {2, 0, 0, 0}.x, R0;
MADR  R1.xyz, -R5, {2, 0, 0, 0}.x, R1;
DP3R  R0.x, R0, R0;
DP3R  R0.y, R1, R1;
ADDR  R2.w, R0.x, R0.y;
ADDR  R0.xyz, R4, R3;
MADR  R0.xyz, -R6, {2, 0, 0, 0}.x, R0;
ADDR  R1.xyz, R2, R6;
MULR  R1.w, R1, |R1|;
SLTR  H0.xy, R2.w, R1.w;
MADR  R1.xyz, -R4, {2, 0, 0, 0}.x, R1;
MOVX  o[COLR].xz, H0.xyyw;
DP3R  R0.x, R0, R0;
DP3R  R1.x, R1, R1;
ADDR  R0.x, R1, R0;
MULR  R0.y, R0.w, |R0.w|;
SLTR  H0.xy, R0.x, R0.y;
MOVX  o[COLR].yw, H0.xxzy;
END
# 71 instructions, 8 R-regs, 1 H-regs
# 71 inst, (10 mov, 8 tex, 0 complex, 53 math)
# non-mov args: 0 24 21 16 0
# mov args:     0 6 2 2 0
