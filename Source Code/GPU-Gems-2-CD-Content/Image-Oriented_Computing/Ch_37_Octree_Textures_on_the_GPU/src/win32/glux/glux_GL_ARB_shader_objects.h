
// --------------------------------------------------------
// Generated by glux perl script (Wed Mar 31 17:19:35 2004)
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#include "glux_no_redefine.h"
#include "glux_ext_defs.h"
#include "gluxLoader.h"
#include "gluxPlugin.h"
// --------------------------------------------------------
//         Plugin creation
// --------------------------------------------------------

#ifndef __GLUX_GL_ARB_shader_objects__
#define __GLUX_GL_ARB_shader_objects__

GLUX_NEW_PLUGIN(GL_ARB_shader_objects);
// --------------------------------------------------------
//           Extension conditions
// --------------------------------------------------------
// --------------------------------------------------------
//           Extension defines
// --------------------------------------------------------
#ifndef GL_PROGRAM_OBJECT_ARB
#  define GL_PROGRAM_OBJECT_ARB 0x8B40
#endif
#ifndef GL_SHADER_OBJECT_ARB
#  define GL_SHADER_OBJECT_ARB 0x8B48
#endif
#ifndef GL_OBJECT_TYPE_ARB
#  define GL_OBJECT_TYPE_ARB 0x8B4E
#endif
#ifndef GL_OBJECT_SUBTYPE_ARB
#  define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#endif
#ifndef GL_FLOAT_VEC2_ARB
#  define GL_FLOAT_VEC2_ARB 0x8B50
#endif
#ifndef GL_FLOAT_VEC3_ARB
#  define GL_FLOAT_VEC3_ARB 0x8B51
#endif
#ifndef GL_FLOAT_VEC4_ARB
#  define GL_FLOAT_VEC4_ARB 0x8B52
#endif
#ifndef GL_INT_VEC2_ARB
#  define GL_INT_VEC2_ARB 0x8B53
#endif
#ifndef GL_INT_VEC3_ARB
#  define GL_INT_VEC3_ARB 0x8B54
#endif
#ifndef GL_INT_VEC4_ARB
#  define GL_INT_VEC4_ARB 0x8B55
#endif
#ifndef GL_BOOL_ARB
#  define GL_BOOL_ARB 0x8B56
#endif
#ifndef GL_BOOL_VEC2_ARB
#  define GL_BOOL_VEC2_ARB 0x8B57
#endif
#ifndef GL_BOOL_VEC3_ARB
#  define GL_BOOL_VEC3_ARB 0x8B58
#endif
#ifndef GL_BOOL_VEC4_ARB
#  define GL_BOOL_VEC4_ARB 0x8B59
#endif
#ifndef GL_FLOAT_MAT2_ARB
#  define GL_FLOAT_MAT2_ARB 0x8B5A
#endif
#ifndef GL_FLOAT_MAT3_ARB
#  define GL_FLOAT_MAT3_ARB 0x8B5B
#endif
#ifndef GL_FLOAT_MAT4_ARB
#  define GL_FLOAT_MAT4_ARB 0x8B5C
#endif
#ifndef GL_OBJECT_DELETE_STATUS_ARB
#  define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#endif
#ifndef GL_OBJECT_COMPILE_STATUS_ARB
#  define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#endif
#ifndef GL_OBJECT_LINK_STATUS_ARB
#  define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#endif
#ifndef GL_OBJECT_VALIDATE_STATUS_ARB
#  define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#endif
#ifndef GL_OBJECT_INFO_LOG_LENGTH_ARB
#  define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#endif
#ifndef GL_OBJECT_ATTACHED_OBJECTS_ARB
#  define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#endif
#ifndef GL_OBJECT_ACTIVE_UNIFORMS_ARB
#  define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#endif
#ifndef GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#  define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#endif
#ifndef GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
#  define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#endif
// --------------------------------------------------------
//           Extension gl function typedefs
// --------------------------------------------------------
#ifndef __GLUX__GLFCT_glDeleteObjectARB
typedef void (APIENTRYP PFNGLUXDELETEOBJECTARBPROC) (GLhandleARB obj);
#endif
#ifndef __GLUX__GLFCT_glGetHandleARB
typedef GLhandleARB (APIENTRYP PFNGLUXGETHANDLEARBPROC) (GLenum pname);
#endif
#ifndef __GLUX__GLFCT_glDetachObjectARB
typedef void (APIENTRYP PFNGLUXDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
#endif
#ifndef __GLUX__GLFCT_glCreateShaderObjectARB
typedef GLhandleARB (APIENTRYP PFNGLUXCREATESHADEROBJECTARBPROC) (GLenum shaderType);
#endif
#ifndef __GLUX__GLFCT_glShaderSourceARB
typedef void (APIENTRYP PFNGLUXSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
#endif
#ifndef __GLUX__GLFCT_glCompileShaderARB
typedef void (APIENTRYP PFNGLUXCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
#endif
#ifndef __GLUX__GLFCT_glCreateProgramObjectARB
typedef GLhandleARB (APIENTRYP PFNGLUXCREATEPROGRAMOBJECTARBPROC) (void);
#endif
#ifndef __GLUX__GLFCT_glAttachObjectARB
typedef void (APIENTRYP PFNGLUXATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
#endif
#ifndef __GLUX__GLFCT_glLinkProgramARB
typedef void (APIENTRYP PFNGLUXLINKPROGRAMARBPROC) (GLhandleARB programObj);
#endif
#ifndef __GLUX__GLFCT_glUseProgramObjectARB
typedef void (APIENTRYP PFNGLUXUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
#endif
#ifndef __GLUX__GLFCT_glValidateProgramARB
typedef void (APIENTRYP PFNGLUXVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
#endif
#ifndef __GLUX__GLFCT_glUniform1fARB
typedef void (APIENTRYP PFNGLUXUNIFORM1FARBPROC) (GLint location, GLfloat v0);
#endif
#ifndef __GLUX__GLFCT_glUniform2fARB
typedef void (APIENTRYP PFNGLUXUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
#endif
#ifndef __GLUX__GLFCT_glUniform3fARB
typedef void (APIENTRYP PFNGLUXUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#endif
#ifndef __GLUX__GLFCT_glUniform4fARB
typedef void (APIENTRYP PFNGLUXUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#endif
#ifndef __GLUX__GLFCT_glUniform1iARB
typedef void (APIENTRYP PFNGLUXUNIFORM1IARBPROC) (GLint location, GLint v0);
#endif
#ifndef __GLUX__GLFCT_glUniform2iARB
typedef void (APIENTRYP PFNGLUXUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
#endif
#ifndef __GLUX__GLFCT_glUniform3iARB
typedef void (APIENTRYP PFNGLUXUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
#endif
#ifndef __GLUX__GLFCT_glUniform4iARB
typedef void (APIENTRYP PFNGLUXUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#endif
#ifndef __GLUX__GLFCT_glUniform1fvARB
typedef void (APIENTRYP PFNGLUXUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniform2fvARB
typedef void (APIENTRYP PFNGLUXUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniform3fvARB
typedef void (APIENTRYP PFNGLUXUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniform4fvARB
typedef void (APIENTRYP PFNGLUXUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniform1ivARB
typedef void (APIENTRYP PFNGLUXUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform2ivARB
typedef void (APIENTRYP PFNGLUXUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform3ivARB
typedef void (APIENTRYP PFNGLUXUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glUniform4ivARB
typedef void (APIENTRYP PFNGLUXUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2fvARB
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3fvARB
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4fvARB
typedef void (APIENTRYP PFNGLUXUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#endif
#ifndef __GLUX__GLFCT_glGetObjectParameterfvARB
typedef void (APIENTRYP PFNGLUXGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
#endif
#ifndef __GLUX__GLFCT_glGetObjectParameterivARB
typedef void (APIENTRYP PFNGLUXGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetInfoLogARB
typedef void (APIENTRYP PFNGLUXGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
#endif
#ifndef __GLUX__GLFCT_glGetAttachedObjectsARB
typedef void (APIENTRYP PFNGLUXGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
#endif
#ifndef __GLUX__GLFCT_glGetUniformLocationARB
typedef GLint (APIENTRYP PFNGLUXGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformARB
typedef void (APIENTRYP PFNGLUXGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
#endif
#ifndef __GLUX__GLFCT_glGetUniformfvARB
typedef void (APIENTRYP PFNGLUXGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
#endif
#ifndef __GLUX__GLFCT_glGetUniformivARB
typedef void (APIENTRYP PFNGLUXGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
#endif
#ifndef __GLUX__GLFCT_glGetShaderSourceARB
typedef void (APIENTRYP PFNGLUXGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
#endif
// --------------------------------------------------------
//           Extension gl functions
// --------------------------------------------------------
namespace glux {
#ifndef __GLUX__GLFCT_glDeleteObjectARB
extern PFNGLUXDELETEOBJECTARBPROC glDeleteObjectARB;
#endif
#ifndef __GLUX__GLFCT_glGetHandleARB
extern PFNGLUXGETHANDLEARBPROC glGetHandleARB;
#endif
#ifndef __GLUX__GLFCT_glDetachObjectARB
extern PFNGLUXDETACHOBJECTARBPROC glDetachObjectARB;
#endif
#ifndef __GLUX__GLFCT_glCreateShaderObjectARB
extern PFNGLUXCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
#endif
#ifndef __GLUX__GLFCT_glShaderSourceARB
extern PFNGLUXSHADERSOURCEARBPROC glShaderSourceARB;
#endif
#ifndef __GLUX__GLFCT_glCompileShaderARB
extern PFNGLUXCOMPILESHADERARBPROC glCompileShaderARB;
#endif
#ifndef __GLUX__GLFCT_glCreateProgramObjectARB
extern PFNGLUXCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
#endif
#ifndef __GLUX__GLFCT_glAttachObjectARB
extern PFNGLUXATTACHOBJECTARBPROC glAttachObjectARB;
#endif
#ifndef __GLUX__GLFCT_glLinkProgramARB
extern PFNGLUXLINKPROGRAMARBPROC glLinkProgramARB;
#endif
#ifndef __GLUX__GLFCT_glUseProgramObjectARB
extern PFNGLUXUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
#endif
#ifndef __GLUX__GLFCT_glValidateProgramARB
extern PFNGLUXVALIDATEPROGRAMARBPROC glValidateProgramARB;
#endif
#ifndef __GLUX__GLFCT_glUniform1fARB
extern PFNGLUXUNIFORM1FARBPROC glUniform1fARB;
#endif
#ifndef __GLUX__GLFCT_glUniform2fARB
extern PFNGLUXUNIFORM2FARBPROC glUniform2fARB;
#endif
#ifndef __GLUX__GLFCT_glUniform3fARB
extern PFNGLUXUNIFORM3FARBPROC glUniform3fARB;
#endif
#ifndef __GLUX__GLFCT_glUniform4fARB
extern PFNGLUXUNIFORM4FARBPROC glUniform4fARB;
#endif
#ifndef __GLUX__GLFCT_glUniform1iARB
extern PFNGLUXUNIFORM1IARBPROC glUniform1iARB;
#endif
#ifndef __GLUX__GLFCT_glUniform2iARB
extern PFNGLUXUNIFORM2IARBPROC glUniform2iARB;
#endif
#ifndef __GLUX__GLFCT_glUniform3iARB
extern PFNGLUXUNIFORM3IARBPROC glUniform3iARB;
#endif
#ifndef __GLUX__GLFCT_glUniform4iARB
extern PFNGLUXUNIFORM4IARBPROC glUniform4iARB;
#endif
#ifndef __GLUX__GLFCT_glUniform1fvARB
extern PFNGLUXUNIFORM1FVARBPROC glUniform1fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniform2fvARB
extern PFNGLUXUNIFORM2FVARBPROC glUniform2fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniform3fvARB
extern PFNGLUXUNIFORM3FVARBPROC glUniform3fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniform4fvARB
extern PFNGLUXUNIFORM4FVARBPROC glUniform4fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniform1ivARB
extern PFNGLUXUNIFORM1IVARBPROC glUniform1ivARB;
#endif
#ifndef __GLUX__GLFCT_glUniform2ivARB
extern PFNGLUXUNIFORM2IVARBPROC glUniform2ivARB;
#endif
#ifndef __GLUX__GLFCT_glUniform3ivARB
extern PFNGLUXUNIFORM3IVARBPROC glUniform3ivARB;
#endif
#ifndef __GLUX__GLFCT_glUniform4ivARB
extern PFNGLUXUNIFORM4IVARBPROC glUniform4ivARB;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix2fvARB
extern PFNGLUXUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix3fvARB
extern PFNGLUXUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
#endif
#ifndef __GLUX__GLFCT_glUniformMatrix4fvARB
extern PFNGLUXUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
#endif
#ifndef __GLUX__GLFCT_glGetObjectParameterfvARB
extern PFNGLUXGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
#endif
#ifndef __GLUX__GLFCT_glGetObjectParameterivARB
extern PFNGLUXGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
#endif
#ifndef __GLUX__GLFCT_glGetInfoLogARB
extern PFNGLUXGETINFOLOGARBPROC glGetInfoLogARB;
#endif
#ifndef __GLUX__GLFCT_glGetAttachedObjectsARB
extern PFNGLUXGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
#endif
#ifndef __GLUX__GLFCT_glGetUniformLocationARB
extern PFNGLUXGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
#endif
#ifndef __GLUX__GLFCT_glGetActiveUniformARB
extern PFNGLUXGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
#endif
#ifndef __GLUX__GLFCT_glGetUniformfvARB
extern PFNGLUXGETUNIFORMFVARBPROC glGetUniformfvARB;
#endif
#ifndef __GLUX__GLFCT_glGetUniformivARB
extern PFNGLUXGETUNIFORMIVARBPROC glGetUniformivARB;
#endif
#ifndef __GLUX__GLFCT_glGetShaderSourceARB
extern PFNGLUXGETSHADERSOURCEARBPROC glGetShaderSourceARB;
#endif
} // namespace glux
// --------------------------------------------------------
#endif
// --------------------------------------------------------
