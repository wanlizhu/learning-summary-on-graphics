// --------------------------------------------------------
// Generated by glux perl script ()
// 
// Sylvain Lefebvre - 2002 - Sylvain.Lefebvre@imag.fr
// --------------------------------------------------------
#ifndef __GLUX_EXT_DEFS__
#define __GLUX_EXT_DEFS__
// --------------------------------------------------------
#ifdef WIN32
#include <windows.h>
#include <stddef.h>
#else
#include <X11/X.h>
#include <GL/glx.h>
#endif
// --------------------------------------------------------
#include <GL/gl.h>
// --------------------------------------------------------
// Extensions custom declarations
// --------------------------------------------------------
# ifdef WIN32
  #define ERROR_INVALID_PIXEL_TYPE_EXT   0x2043
# endif
# ifndef WIN32
  typedef XID GLXPbufferSGIX;
  typedef struct {
      int type;
      unsigned long serial;	  /* # of last request processed by server */
      Bool send_event;		  /* true if this came for SendEvent request */
      Display *display;		  /* display the event was read from */
      GLXDrawable drawable;	  /* i.d. of Drawable */
      int event_type;		  /* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
      int draw_type;		  /* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
      unsigned int mask;	  /* mask indicating which buffers are affected*/
      int x, y;
      int width, height;
      int count;		  /* if nonzero, at least this many more */
  } GLXBufferClobberEventSGIX;
# endif
# ifdef WIN32
  DECLARE_HANDLE(HPBUFFERARB);
# endif
  /* Some NV_fragment_program entry points are shared with ARB_vertex_program. */
# ifndef WIN32
  /* reuse GLX_SCREEN_EXT */
  typedef XID GLXFBConfigIDSGIX;
  typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
# endif
# ifndef WIN32
  typedef void (*__GLXextFuncPtr)(void);
# endif
  /* GL types for handling large vertex buffer objects */
  typedef ptrdiff_t GLintptrARB;
  typedef ptrdiff_t GLsizeiptrARB;
# ifndef WIN32
  #if defined(__STDC_VERSION__)
  #if __STDC_VERSION__ >= 199901L
  /* Include ISO C99 integer types for OML_sync_control; need a better test */
  #include <inttypes.h>
  
  #endif
  
  #endif /* C99 version test */
# endif
  /* reuse GL_EYE_PLANE */
  /* GL type for representing NVIDIA "half" floating point type in host memory */
  typedef unsigned short GLhalfNV;
# ifndef WIN32
  typedef XID GLXVideoSourceSGIX;
  #ifdef _VL_H
  #endif
  
# endif
  /* reuse GL_TEXTURE0_ARB */
  /* reuse GL_TEXTURE1_ARB */
  /* reuse GL_ZERO */
  /* reuse GL_NONE */
  /* reuse GL_FOG */
# ifndef WIN32
  #ifdef _DM_BUFFER_H_
  #endif
  
# endif
  /* All ARB_fragment_program entry points are shared with ARB_vertex_program. */
# ifdef WIN32
  DECLARE_HANDLE(HPBUFFEREXT);
# endif
  /* GL types for handling shader object handles and characters */
  typedef char GLcharARB;		/* native character */
  typedef unsigned int GLhandleARB;	/* shader object handle */
  /* reuse GL_FRAGMENT_DEPTH_EXT */
# ifndef WIN32
  /* reuse GLX_NONE_EXT */
# endif
# ifdef WIN32
  #define ERROR_INVALID_PIXEL_TYPE_ARB   0x2043
  #define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB 0x2054
# endif
// --------------------------------------------------------
#endif
// --------------------------------------------------------
