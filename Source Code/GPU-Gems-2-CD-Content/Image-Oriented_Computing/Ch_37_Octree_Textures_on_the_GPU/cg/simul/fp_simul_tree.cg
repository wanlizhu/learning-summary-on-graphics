#include "../liboctreegpu/fp_tree_lookup.cg"
#include "../../src/simul/config.h"

// vertex program output
struct V2FI
{
  float4 HPosition    : POSITION;
  float4 Color0       : COLOR0;
  float3 TCoord0      : TEXCOORD0;
  float3 T            : TEXCOORD1;
  float3 B            : TEXCOORD2;
  float3 N            : TEXCOORD3;
  float3 I            : TEXCOORD4;
  float3 L            : TEXCOORD5;
  float3 NObj         : TEXCOORD6;
  float4 Snake        : TEXCOORD7;
};

// fragment program output
struct PixelOut 
{
  float4 COL : COLOR;
};

PixelOut main(V2FI IN,
	      uniform sampler3D   RefTex,
	      uniform float3      reftex_cell_size,
	      uniform float       boxres,
	      uniform float3      level_cell_size,
	      uniform SAMPLER     Density
	      )
{
  PixelOut OUT;

  // ==============
  // n3-tree lookup
  float4 i = tree_lookup_non_empty(RefTex,
				   reftex_cell_size,boxres,
				   IN.TCoord0);
  i=GPU_DECODE_INDEX8(i);
  float4 c = (float4)TEX0(Density,i.xy);
  c=DECODE_DENSITY(c);

  // ==============
  // final color

  OUT.COL=float4(c.x,c.x/4.0,c.w,1.0);

  //float diff=max(0.0,dot(IN.L,normalize(IN.N)));
  //OUT.COL=(0.2+0.8*float4(c.x,c.x*2.0,c.x*10.0,1.0))*diff;
  //OUT.COL=float4(c.xyz,1.0);

/* 
   float v=c.x;

   float dcdx=0.0;
   float dcdy=0.0;
  
   dcdx=ddx(v*10.0);
   dcdy=ddy(v*10.0);
   float4 color;
   if (v > 1.0/256.0)
   color=float4(0.0,0.0,min(v,0.1),1.0);
   else
   color=float4(1.0,1.0,1.0,0.0);
   float3 n=normalize(IN.N+float3(-dcdx,-dcdy,0.0));
  
   float diff=max(0.0,dot(IN.L,n));
   float3 refl=reflect(-normalize(IN.I),n);
   float spec=pow(max(0.0,dot(IN.L,refl)),30.0);
  
   // done
   OUT.COL=(0.4+0.6*color)*diff+spec*color.w;
*/
  return OUT;
}
